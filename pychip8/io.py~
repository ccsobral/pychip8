import tkinter as tk
from itertools import product

import numpy as np

class Display:
    """
    Args:
        display_size: str of format 'WidthxHeight'.
        Should be some integer multiple of 64x32, the original Chip8 display.
    """

    _original_width, _original_height = 64, 32
    
    def __init__(self, tk_manager: tk.Tk, display_size: str = '640x320'):
        self._check_integer_dimensions(display_size)
        self._check_valid_dimensions()

        self._pixel_width = self._width // Display._original_width
        self._pixel_height = self._height // Display._original_height

        self.pixel_buffer = np.zeros((32,64), dtype=np.bool)
        
        self._tk_manager = tk_manager
        self._tk_manager.geometry(display_size)
        self._tk_manager.resizable(width=False, height=False)

        self._display = tk.Canvas(
            tk_manager, width = self._width, height = self._height
        )
        self._display.pack()
        self._create_pixel_grid()
    
    def _check_integer_dimensions(self, display_size: str):
        try:
            self._width, self._height = map(int, display_size.split('x'))
        except ValueError:
            print(
                'Could not extract width and height from display size!',
                f'The input display size was {display_size!r}\n',
                sep='\n'
            )
            raise

    def _check_valid_dimensions(self):
        self._is_width_multiple = (
            True if self._width % Display._original_width == 0 else False
        )
        self._is_height_multiple = (
            True if self._height % Display._original_height == 0 else False
        )
        if not self._is_width_multiple or not self._is_height_multiple:
            raise ValueError(
                'Display width should be a number multiple of 64'
                ' and height should be multiple of 32.'
            )

    def _create_pixel_grid(self):
        """
        Create a "virtual" 64x32 Chip8 display where each "virtual pixel"
        is actually (width / original_width) pixels wide
        and (height / original_height) pixels tall.
        """
        
        pixel_grid = product(
            range(0, self._height, self._pixel_height),
            range(0, self._width, self._pixel_width)
        )

        self._pixel_ids = np.zeros(32*64, dtype=int)

        for y_pos, x_pos in pixel_grid:
            color = 'black'
            pixel_id = self._display.create_rectangle(
                x_pos, y_pos, 
                x_pos + self._pixel_width, y_pos + self._pixel_height,
                fill=color, outline=color
            )
            self._pixel_ids[pixel_id-1] = pixel_id

        self._tk_manager.update()

    def _update_pixel_grid(self):
        """
        """
        for pixel_id, is_pixel_on in zip(self._pixel_ids, self.pixel_buffer.reshape(-1)):
            print(pixel_id, is_pixel_on)
            if is_pixel_on:
                self._display.itemconfigure(pixel_id, fill='green')
            else:
                self._display.itemconfigure(pixel_id, fill='black')
        self._tk_manager.update()